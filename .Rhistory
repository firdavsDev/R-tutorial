lar
stepwise
data <- state.x77
data
# Define variable groups
x <- as.matrix(data[-2])
y <- data[, 2]
y
hist(y)
# Using variable groups
reg1 <- lm(y ~ x)
x
# Define variable groups
x <- as.matrix(data[-2])
x
data <- state.x77
# Define variable groups
x <- as.matrix(data[-2])
y <- data[, 2]
# Define variable groups
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
# Define variable groups
x <- as.matrix(data[-12])
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[-12])
x
y <- data[, 12]
y
data <- state.x77
# Define variable groups
x <- as.matrix(data[, -2])
data <- state.x77
# Define variable groups
x <- as.matrix(data[-2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
# Define variable groups
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[, -12])
y <- data[, 12]
x <- data[, -12]
y <- data[, 12]
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
x <- data[, -12]
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
# Define variable groups
x <- as.matrix(data[, -12])
# Using variable groups
reg1 <- lm(y ~ x)
# Or specify variables individually
reg1 <- lm(RTEN ~ CONT + INTG + DMNR + DILG + CFMG +
DECI + PREP + FAMI + ORAL + WRIT + PHYS,
data = USJudgeRatings)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
data <- state.x77
# Define variable groups
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
summary(reg1)  # Inferential tests
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
summary(stepwise)
stepwise
?state.x77
head(state.x77)
data <- state.x77
# Using variable groups
reg1 <- lm(y ~ x)
reg1
# Or specify variables individually
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder +
"HS Grad", data = state.x77)
# Or specify variables individually
states <- as.data.frame(state.x77)
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder +
"HS Grad", data = states)
states
reg2 <- lm(Income ~ Illiteracy, data = states)
reg2 <- lm(Income ~ Illiteracy + Murder, data = states)
reg2
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder +
"HS Grad", data = states)
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder + "HS Grad", data = states)
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder, data = states)
reg2 <- lm(Income ~ Illiteracy + Murder, data = states)
head(states)
str(states)
reg2 <- lm(Income ~ Illiteracy + Life Exp + Murder +
HS Grad, data = states)
reg2 <- lm(Income ~ Illiteracy + `Life Exp` + Murder +
`HS Grad`, data = states)
reg2
summary(reg1)
summary(reg2)
anova(reg1)            # Coefficients w/inferential tests
data <- as.data.frame(state.x77)
# Use "Income" as the outcome variable and all others as
# predictors.
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
reg1
summary(reg1)
?state.x77
head(state.x77)
states <- as.data.frame(state.x77)
# Use "Income" as the outcome variable and all others as
# predictors.
x <- as.matrix(states[, -2])
x <- states[, -2]
y <- states[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
# Use "Income" as the outcome variable and all others as
# predictors.
x <- as.matrix(states[, -2])
y <- states[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
reg1
summary(reg1)
# Or specify variables individually
# states <- as.data.frame(state.x77)
reg2 <- lm(Income ~ Illiteracy + `Life Exp` + Murder +
`HS Grad`, data = states)
reg2
summary(reg2)
# Clear environment
rm(list = ls())
reg1
states <- as.data.frame(state.x77)
# Use "Income" as the outcome variable and all others as
# predictors.
X <- as.matrix(states[, -2])
y <- states[, 2]
# First regression model, using all of the predictors
reg1 <- lm(y ~ X)
reg1
summary(reg1)
View(states)
View(states)
head(iris)         # Show the first six lines of iris data
help("iris")
library(datasets)
?iris
head(iris)
hist(iris$Sepal.Length)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
# Put graphs in 3 rows and 1 column
par(mfrow = c(3, 1))
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
# Restore graphic parameter
par(mfrow=c(1, 1))
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
(x1 <- 1:3)
View(states)
(x1 <- 1:3)
(y  <- 1:9)
# Combine variables
(df1 <- cbind.data.frame(x1, y))
typeof(df1$x1)
str(df1)
(x2  <- as.factor(c(1:3)))
(df2 <- cbind.data.frame(x2, y))
typeof(df2$x2)
str(df2)
x3  <- c(1:3)
df3 <- cbind.data.frame(x3, y)
# Clear environment
rm(list = ls())
a <- c(1:9)
b <- a+1
c <- a+b
d <- a*b
sqrt(d)
e = a^b
e
type(a)
?plot #help
plot(x,y)
plot(x=x,y=y)
# Plot exm
x <- c(1,2,3,4)
y  <- c(5,6,7,8)
?plot #help
plot(x=x,y=y)
plot(x=x,y=y
ol = "#cc0000",  # Hex code for datalab.cc red
plot(x=x,y=y, ol = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(x=x,y=y, ol = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "ustom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8")
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8", type='l')
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8", type='s')
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8", type='b')
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8", type='h')
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
# Use solid circles for points
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8", type='h')
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8", type='h')
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
#pch = 19,         # Use solid circles for points
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8",
type='h')
?curve
curve(x^2, -2,2)
curve(x^2, -2,2, type = 'l')
curve(x^2, -2,2, type = 'b')
curve(x^2, -2,2, type = 's')
curve(x^3, -3,3, type = 's')
curve(x^3*(x-3), -2,2, type = 's')
curve(x^3*(x-3), -2,2, type = 'o')
curve(x^3*(x-3), -2,2, type = 'j')
curve(x^3*(x-3), -2,2, type = 'l')
curve(x^3*(x-3)+ log10(100), -2,2, type = 'l')
curve(x^3*(x-3)+ log10(100), -200,200, type = 'l')
curve(x^3*(x-3)+ log10(100), -20,20, type = 'l')
curve(x^3*(x-3)+ log10(x), -20,20, type = 'l')
curve(x^3*(x-3)+ log10(10), -20,20, type = 'l')
?curve #help
curve(x^3*(x-3)+ log10(10), -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz')
curve(x^3*(x-3)+ log10(10), -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz', col= "cc0000")
curve(x^3*(x-3)+ log10(10), -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz')
?plot #help
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8",
type='h')
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
#pch = 19,         # Use solid circles for points
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8",
type='l')
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
#pch = 19,         # Use solid circles for points
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8",
type='o')
funs <- x^3*(x-3)+ log10(10)
curve(funs, -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz')
curve(funs(x), -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz')
curve(funs(x), -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz')
curve( x^3*(x-3)+ log10(10), -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz')
curve( x^3*(x-3)+ log3(10), -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz')
curve( x^3*(x-3)+ log(100,10), -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz')
curve( x^3*(x-3)+ log(100,base=10), -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz')
plot(x=x,y=y, col = "#cc0000",  # Hex code for datalab.cc red
pch = 1,         # Use solid circles for points
main = "Custom DataFrame: X vs. Y",
xlab = "1 to 4",
ylab = "5 to 8",
type='o')
a <- c(1:9) # 1 ... 9
b <- a+1 # har elementlarni 1 qushi
c <- a+b #qushish
# Vector uchun maxsus funksiyalar
length(c) #Number of elements in c
min(c)
min(c)
max(c) #max element
sort(c)
numeric(c) #Vector with n zero
numeric(2) #Vector with n zero
sum(c) #sum of all element
prod(c)
rep(c,d) #Vector with d equal elemnts c
rep(c,a) #Vector with d equal elemnts c
sep(c) # ??
seq(c) # ??
a <- c(-3,4,6,8,9)
a+2
b <- c(-2,4,3,2,6)
b*3
m<-c(4,6,3,9)
n<-c(3,8,4,5)
mn <- m*n
mnmn <- m+n
a<-c(4,6,3,4)
n<-c(-3,8,2,5)
an <- a-n
c
b<-c(3,6,3,9)
d<-c(3,8,2,5)
bd <- sqrt(b*d)
#6) bd <- sqrt(b*d)
e<-c(5,6,3,-6)
f<-c(3,8,4,4)
ef<- (e+f)+9
#7)ef<- (e+f)+9
b<-c(4,15,3,9)
n<-c(-3,8,2,5)
#5) an <- a-n
b<-c(3,6,3,9)
#7)ef<- (e+f)+9
b<-c(4,15,3,9)
c<-c(3,2,4,9)
bc <- (b*c)-3
#8)bc <- (b*c)-3
k<-(c(-2,-7,3,3)+c(1,8,4,5))^2
pp <-sqrt(p(11,6,3,5)* c(3,8,4,5))
pp <-sqrt(c(11,6,3,5)* c(3,8,4,5))
curve(x^3-4*x^2+7, -3,6, type = 's')
curve(x^3-4*x^2+7, -3,6, type = 'l', xlab = '-3dan 6gacha', ylab = 'Funsiyamiz')
curve(x^3-4*x^2+7, -3,6, type = 'l', xlab = '-3dan 6gacha', ylab = 'Funsiyamiz')
curve(sin(x), -6,6, type = 'l', xlab = '-3dan 6gacha', ylab = 'Funsiyamiz')
curve(4*cos(x)+2*sin(x), -12,16, type = 'l', xlab = '-12dan 16gacha', ylab = 'Funsiyamiz')
curve(log10(x)-sin(3*x), 6,14, type = 'l', xlab = '6dan 14gacha', ylab = 'Funsiyamiz')
1)curve(x^3-4*x^2+7, -3,6, type = 'l', xlab = '-3dan 6gacha', ylab = 'Funsiyamiz')
curve(cos(x), -20,20, type = 'l', xlab = '-20dan 20gacha', ylab = 'Funsiyamiz')
curve(sin(x)-tan(x), -12,12, type = 'l', xlab = '-12dan 12gacha', ylab = 'Funsiyamiz')
curve(cos(x)+tan(x), -17,12, type = 'l', xlab = '-3dan 6gacha', ylab = 'Funsiyamiz')
curve(4*x-sin(x), -16,20, type = 'l', xlab = '-3dan 6gacha', ylab = 'Funsiyamiz')
curve(-3*x+tan(x), -14,15, type = 'l', xlab = '-14dan 15gacha', ylab = 'Funsiyamiz')
curve(3*x+7, -12,15, type = 'l', xlab = '-12dan 15gacha', ylab = 'Funsiyamiz')
numeric(2) #Vector with n zero
c <- a+b #qushish
a <- c(1:9) # 1 ... 9
b <- a+1 # har elementlarni 1 qushi
c <- a+b #qushish
prod(c)
sum(c) #sum of all element
rep(c,a) #Vector with d equal elemnts c
rep(c,a) #Vector with d equal elemnts c do not store at memory
rep(c,20) #Vector with d equal elemnts c do not store at memory
rep(c,a) #Vector with d equal elemnts c do not store at memory
rep(1,20)
rep(3,5)
rep(3,5)
rep(3;5)
rep(3:5)
rep(3,5)
seq(1,5) # ??
seq(1,5,2) # 1 to 5
seq(1,5,0.5) # 1 to 5
rep(c,a)
eesdwed
aa<-seq(1,5,0.5) # 1 to 5
seq(1,10, length.oit=5)
seq(1,10, length.out=5)
seq(1,10, along.with=5) #5ga bulib beradi length
seq(1,10, along.with=1:5) #5ga bulib beradi length
seq(1,10, along.with=2:5) #5ga bulib beradi length
seq(1,10, along.with=3:5) #5ga bulib beradi length
x2 <- 5:15
# Mantiqiy amaalar
a <- c(7,2,6,9,4,1,3)
b<-a<3|a>=6
b<-a<3|a>=6
x3<-c(3,2,2,1,2,2)
xf<-factor(x3,labels = c("bad","good","ok"))
xf
x3<-c(3,2,2,1,2,2,3)
xf<-factor(x3,labels = c("bad","good","ok"))
xf
xf<-factor(x3,labels = c("ok","good","ok"))
xf
xf<-factor(x3,labels = c("good","good","ok"))
good
xf
AVGS <-C(.366,358,.356,.349,.356)
players<-c("BOB","Hob","Jaackson","Davron","Assliddin")
AVGS <-c(.366,358,.356,.349,.356)
players<-c("BOB","Hob","Jaackson","Davron","Assliddin")
names(AVGS)<-players
AVGS
AVGS <-c(.366,358,.356,.349)
players<-c("BOB","Hob","Jaackson","Davron","Assliddin")
names(AVGS)<-players
,.356
,.356
AVGS <-c(.366,358,.356,.349,.356)
players<-c("BOB","Hob","Jaackson","Davron","Assliddin")
names(AVGS)<-players
AVGS
AVGS[AVGS>0.35]
oylik<-c(10,11,21,5,7,8,9,2)
fish <-c("davron","asliddin","Ahmad","BObur0","BObur1","BObur2","BObur3","BObur4")
names(oylik)<-fish
oylik# CREATE DATA ##############################################
oylik[oylik>=20]
fish <-c("Davron","Asliddin","Ahmadjon","BObur0","BObur1","BObur2","BObur3","BObur4")
names(oylik)<-fish
oylik
oylik[oylik>=20]
(df1 <- cbind.data.frame(oylik, fish))
(df1 <- cbind.data.frame(oylik, fish))
df1$oylik <- factor(df1$oylik,
levels = c(1, 2, 3),
labels = c("macOS", "Windows", "Linux"))
df1
oylik<-c(10,11,21,5,7,8,9,2)
fish <-c("Davron","Asliddin","Ahmadjon","BObur0","BObur1","BObur2","BObur3","BObur4")
names(oylik)<-fish
oylik
oylik[oylik>=20]
oylik<-c(10,11,21)
fish <-c("Davron","Asliddin","Ahmadjon")
(df1 <- cbind.data.frame(oylik, fish))
df1$oylik <- factor(df1$oylik,
levels = c(1, 2, 3),
labels = c("macOS", "Windows", "Linux"))
df1
(df1 <- cbind.data.frame(oylik, fish))
df1$oylik <- factor(df1$oylik,
levels = c(1, 2, 3))
df1
(df1 <- cbind.data.frame(oylik, fish))
(df1 <- cbind.data.frame(oylik, fish))
df1
sort(df1)
(df1 <- cbind.data.frame(oylik, fish))
sort(df1)
df1
(df1 <- rbind.data.frame(oylik, fish))
df1
(df1 <- cbind.data.frame(oylik, fish))
df1
